
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <fstream>
#include <vector>
#include <random>
#include <conio.h>

using namespace std;

void returnToHomeScreen();


bool InputMenuCheck(int input) {
	if (input != 1 && input != 2 && input != 3 && input != 4) {
		return 0; // in case of incorrect input
	}
	else return 1; // in case of correct input
}

bool InputAnswerCheck(string input) {
	if (input != "A" && input != "B" && input != "C" && input != "D") {
		return 0; // in case of incorrect input
	}
	else return 1; // in case of correct input
}

int FileLinesCount(string fileName) {
	
	int numLines = 0;
	ifstream in(fileName);
	string unused;
	while (getline(in, unused))
		++numLines;

	return numLines;
}

string GetLineFromFile (string fileName, int certainLine) {
	ifstream myFile;

	myFile.open(fileName, std::fstream::in);

	string line;
	int countLines = 1;
	while (getline(myFile, line)) {
		if (countLines == certainLine) {
			return line;
		}
		countLines++;
	}
	myFile.close();
}


vector<int> FindLinesEqualToString (string fileName, string searchedString) {
	
	vector<int> foundLines;
	ifstream myFile;
	myFile.open(fileName, std::fstream::in);
	string line;
	int countLines = 1;
	while (getline(myFile, line)) {
		if (line == searchedString) {
			foundLines.push_back(countLines);
		}
		countLines++;
	}
	myFile.close();

	return foundLines;
}

int RandomNumberFromVector(vector<int> vtr) {
	random_device random_device;
	mt19937 engine{ random_device() };
	uniform_int_distribution<int> dist(0, vtr.size() - 1);
	int randomElement = vtr[dist(engine)];

	return randomElement;
}

void HomeScreen(int &choice) {
	cout << "===================== Who wants to be a milionaire =====================" << endl;
	cout << "=========================== Bulgaria edition ===========================" << endl;
	cout << endl;
	cout << "                           1. New Game                                  " << endl;
	cout << "                           2. Add new question                          " << endl;
	cout << "                           3. Edit question                             " << endl;
	cout << "                           4. Exit                                      " << endl;
	cout << endl;
	cout << "========================================================================" << endl;
	cout << endl;
	cout << "Enter your choice here: "; 
	cin >> choice; 
	if (InputMenuCheck(choice) == 1) {
		cout << endl;
	}
	else {
		while (InputMenuCheck(choice) == 0) {
			cout << "Incorrect input! Input 1, 2, 3 or 4: "; cin >> choice;
		}
	}
}

void ChooseCategory(int& choice) {
	cout << "========================================================================" << endl;
	cout << endl;
	cout << "                       Choose a category:                               " << endl;
	cout << "                       1. Bulgarian history                             " << endl;
	cout << "                       2. Bulgarian geography                           " << endl;
	cout << "                       3. Bulgarian sport                               " << endl;
	cout << "                       4. All categories                                " << endl;
	cout << endl;
	cout << "========================================================================" << endl;
	cout << "Enter your choice here: ";
	cin >> choice;
	if (InputMenuCheck(choice) == 1) {
		cout << endl;
	}
	else {
		while (InputMenuCheck(choice) == 0) {
			cout << "Incorrect input! Input 1, 2, 3 or 4: "; cin >> choice;
		}
	}
}


void OutputQuestion(string level, string category, int &check, int numberQuestion, int &prev, int &rem) {
	string prizeScale[15] = { "$500", "$1,000", "$2,000", "$3,000", "$5,000", "$7,500", "$10,000", "$20,000",
				 "$30,000", "$50,000", "$75,000", "$150,000", "$250,000", "$500,000", "$1 MILLION" };
	system("cls");
	check = 1;
	string answerChoice;
	string fileName = "level" + level + ".txt";
	srand(time(0));
	int randomNumber = rand() % a.size();
	int rand = a[randomNumber];
	prev = rand;
	cout << "========================================================================" << endl;
	for (int i = rand + 1; i < rand + 6; i++) cout << GetLineFromFile(fileName, i) << endl;
	cout << "========================================================================" << endl;
	cout << "Enter your choice here: ";
	cin >> answerChoice;
	if (InputAnswerCheck(answerChoice) == 1) {
		cout << endl;
	}
	else {
		while (InputAnswerCheck(answerChoice) == 0) {
			cout << "Incorrect input! Input A, B, C or D: "; cin >> answerChoice;
		}
	}
	string questionID = GetLineFromFile(fileName, rand - 1);
	string rightAnswer = GetLineFromFile("answers.txt", stoi(questionID));
	system("cls"); 
	if (answerChoice == rightAnswer) {
		cout << "========================================================================" << endl;
		cout << "                          Correct answer!                               " << endl;
		cout << "                    Your cuurent prize is:" << prizeScale[numberQuestion - 1] << endl;
		cout << "========================================================================" << endl;
		system("pause");
	}
	else {
		system("cls");
		cout << "========================================================================" << endl;
		cout << "                   Your answer was wrong.                               " << endl;
		cout << "         The correct answer was: "; 
		if (rightAnswer == "A") {
			cout << GetLineFromFile(fileName, rand + 2) << endl;
		}
		else if (rightAnswer == "B") {
			cout << GetLineFromFile(fileName, rand + 3) << endl;
		}
			else if (rightAnswer == "C") {
				cout << GetLineFromFile(fileName, rand + 4) << endl;
			}
		    	else {
			    	cout << GetLineFromFile(fileName, rand + 5) << endl;
				}
		cout << "                       END OF GAME!                                     " << endl;
		if (numberQuestion == 1) { cout << "                          You won: $0" << endl; }
		else
		cout << "                  You won: " << prizeScale[numberQuestion - 2] << endl;
		cout << "========================================================================" << endl;
		system("pause");
		check = 0;
		returnToHomeScreen();
	}
}

void OutputAllQuestions (string category) {
	int check = 1;
	int questionLevels[15] = { 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 10 };
	int i = 0;
	int prev; 
	int rem;
	do { 
		OutputQuestion(to_string(questionLevels[i]), category, check, i + 1, prev, rem);
		i++; 
		if (i == 15) {
			break;
		} 
	while (check != 0);
	system("cls");
	if (i == 15) {
		cout << "========================================================================" << endl;
		cout << endl;
		cout << "                       Congratulattions!                                " << endl;
		cout << "                      You won $1 MILLION!                               " << endl;;
		cout << endl;
		cout << "========================================================================" << endl;
		system("pause");
		returnToHomeScreen();
	}
}


void OutputAllQueastionsForAllCategories() {
	int check = 1;
	string categories[3] = { "Bulgarian history", "Bulgarian geography", "Bulgarian sport" };
	int questionLevels[15] = { 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 10 };
	int i = 0;
	do { 
		srand(time(0));                 // helps to generate a different number each time rand() is executed
		int randomNumber = rand() % 3;  // generates a random number between 0 and 2
		OutputQuestion(to_string(questionLevels[i]), categories[randomNumber], check, i + 1, prev, rem); 
		i++; 
		if (i == 15) break; 
	} 
	while (check != 0);
	system("cls");
	if (i == 15) {
		cout << "========================================================================" << endl;
		cout << endl;
		cout << "                       Congratulattions!                                " << endl;
		cout << "                      You won $1 MILLION!                               " << endl;;
		cout << endl;
		cout << "========================================================================" << endl;
		system("pause");
		returnToHomeScreen();
	}
}

void AddNewQuestion() {
	ofstream myFile;
	string category,  question, answerA, answerB, answerC, answerD, correctAnswer, levelOfDifficulty;

	cout << "========================================================================" << endl;
	cout << "                         Add new question                               " << endl;
	cout << "                         Valid categories:                             " << endl;
	cout << "         Bulgarian history, Bulgarian geography, Bulgarian sport        " << endl;
	cout << "========================================================================" << endl;

	cin.ignore();   // it is used to remove previous problematic input
	cout << "Enter category: ";
	getline(cin, category);
	while (category != "Bulgarian history" && category != "Bulgarian sport" && category != "Bulgarian geography") {
		cout << "Invalid! Choose a valid category: "; getline(cin, category);
	}

	cout << "Enter level of difficulty (between 1 and 10): ";
	getline(cin, levelOfDifficulty);
	while (levelOfDifficulty != "1" && levelOfDifficulty != "2" && levelOfDifficulty != "3" && levelOfDifficulty != "4" && levelOfDifficulty != "5" && levelOfDifficulty != "6" && levelOfDifficulty != "7" && levelOfDifficulty != "8" && levelOfDifficulty != "9" && levelOfDifficulty!="10") {
		cout << "Invalid! Choose a difficulty between 1 and 10: "; getline(cin, levelOfDifficulty);
	}

	cout << "Enter question: ";
	getline(cin, question);
	cout << "Eneter option A: ";
	getline(cin, answerA);
	cout << "Eneter option B: ";
	getline(cin, answerB);
	cout << "Eneter option C: ";
	getline(cin, answerC);
	cout << "Eneter option D: ";
	getline(cin, answerD);

	cout << "Enter correct answer (A/B/C/D): ";
	getline(cin, correctAnswer);
	while (correctAnswer != "A" && correctAnswer != "B" && correctAnswer != "C" && correctAnswer != "D") {
		cout << "Invalid! Choose a valid answer (A/B/C/D): "; getline(cin, correctAnswer);
	}
	
	int questionIDNumber = FileLinesCount("answers.txt") + 1; //the number of lines in "answers.txt" is equal to the last added question ID number; 
														     // so the new ID number is equal to it + 1  

	string myFileName = "level" + levelOfDifficulty + ".txt";
	myFile.open(myFileName, ios_base::app); // app is used to append instead of overwrite

	myFile << endl;
	myFile << questionIDNumber << endl;
	myFile << category << endl;
	myFile << question << endl;
	myFile << "A. " << answerA << endl;
	myFile << "B. " << answerB << endl;
	myFile << "C. " << answerC << endl;
	myFile << "D. " << answerD << endl;
	myFile << " "; // we do that in order for each question's ID number to be exactly 8 rows below the previous one, because we use that exact distance when outputing the questions
	
	myFile.close();

	myFile.open("answers.txt", ios_base::app); 
	myFile << endl;
	myFile << correctAnswer;
	myFile.close();

	system("pause");
	returnToHomeScreen();
}

int main()
{
	ChangeConsoleSize();
	int choice;
	HomeScreen(choice);
	if (choice == 4) {
		return 0;
	}
	
	if (choice == 1) {
		system("cls");
		int categoryChoice; string category;
		ChooseCategory(categoryChoice);
		system("cls");

		if (categoryChoice == 1) {
			OutputAllQuestions("Bulgarian history");
		}
		else if (categoryChoice == 2) {
			OutputAllQuestions("Bulgarian geography");
		}
		else if (categoryChoice == 3) {
			OutputAllQuestions("Bulgarian sport");
		}

		if (categoryChoice == 4) {
			OutputAllQueastionsForAllCategories();
		}
	}
	

	if (choice == 2) {
		system("cls");
		AddNewQuestion();
	}
	
	return 0;
}

void returnToHomeScreen()
{
	system("cls");
	main();
}